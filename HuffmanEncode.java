import java.io.*;
import java.util.*;

public class HuffmanEncode {

	CharNode overallRoot;
	FileReader output;
	FileInputStream byteOutput;

	/**
	 * @param object
	 *            The text file to read
	 * @throws IOException
	 *             Throws exception if it's not readable
	 */
	public HuffmanEncode(File object) throws IOException {
		output = new FileReader(object);
	}

	/**
	 * Reads the filename and creates a File Object which will be used in a
	 * FileInputStream. This changes the program to encode in bytes rather than
	 * characters.
	 *
	 * @param fileName
	 * @throws FileNotFoundException
	 */
	public HuffmanEncode(String fileName) throws FileNotFoundException {
		byteOutput = new FileInputStream(fileName);
	}

	/**
	 * Reads the FileInputStream and counts the occurrence of every byte. Fills
	 * the PriorityQueue with the nodes that you create out of bytes and
	 * occurrences. Builds the Huffman Tree and Traverses the tree.
	 *
	 * @throws IOException
	 */
	public void encodeByteStream() throws IOException {
		// The traversal method should store the following info into a
		// HashMap<K, V> for every leaf node
		// Bytes as K (key) of type Integer (don't use Byte because of a signed
		// problem)
		// Huffman code as V (value) of type String

		// Generate the initial HashMap of integer bytes and integer occurrences
		HashMap<Integer, Integer> byteMap = new HashMap<Integer, Integer>();
		int c;
		while ((c = byteOutput.read()) != -1) {
			byteMap.putIfAbsent(Integer.parseInt(Integer.toBinaryString(c)), 0);
			byteMap.replace(Integer.parseInt((c)), (c))) + 1);
			System.out.println("(" + Integer.toBinaryString(c) + ", " + byteMap.get(Integer.parseInt(Integer.toBinaryString(c))) + ")");
		}
		byteOutput.close();

		// Push the HashMap values into a PriorityQueue as new character Nodes
		// (CharNode)
		PriorityQueue<CharNode> byteQueue = new PriorityQueue<CharNode>();
		for (Map.Entry<Integer, Integer> item : byteMap.entrySet()) {
			byteQueue.add(new CharNode(item.getKey(), null, null, item.getValue()));
		}

		// Combine the Nodes in the queue until only 1 remains. That is the
		// Huffman Tree
		while (byteQueue.size() > 1) {
			CharNode temp1 = byteQueue.remove(); // pop out the two smallest value
			// nodes
			CharNode temp2 = byteQueue.remove(); // and create a new node from the
			// two
			CharNode newNode = new CharNode(null, temp1, temp2, temp1.weight + temp2.weight);
			temp1.parent = temp2.parent = newNode;
			byteQueue.add(newNode); // add it back into the pile
		}

		// Remove the last remaining Node from the PriorityQueue and save it as overallRoot
		CharNode overallRoot = byteQueue.remove();

		// Create a byte map and generate it's binary values from the HuffmanTree
		Map<Integer, String> encodeMap = genMap(overallRoot);

		// Output the generated values from the generated byte map
		System.out.println(encodeMap.toString());
	}

	public void writeToFile(String fileName) {

	}

	/**
	 * @param root
	 *            The current node the method is generating from
	 * @return The updated map with added character and binary path
	 */
	private Map<Integer, String> genMap(CharNode root) {
		Map<Integer, String> map = new HashMap<Integer, String>();
		traversal(map, root, "");
		return map;
	}

	/**
	 * @param map
	 *            The map of characters and it's binary path in a String
	 * @param root
	 *            The current node this method is traversing
	 * @param path
	 *            The String for storing the binary path
	 */
	private void traversal(Map<Integer, String> map, CharNode root, String path) {
		if (root.isLeaf()) {
			map.put(root.symbolValue, path);
		} else {
			traversal(map, root.leftChild, path + '0');
			traversal(map, root.rightChild, path + '1');
		}
	}

	/**
	 * @author Chris Mendoza
	 *
	 *         Custom Character Node class for building the Huffman Tree.
	 *         Implements Comparable for the priorityQueue to use in
	 *         HuffmanEncode
	 *
	 */
	private class CharNode implements Comparable<CharNode> {

		private Character symbol; // char to be encoded, empty if combined node
		private Integer symbolValue;
		CharNode leftChild;
		CharNode rightChild;
		CharNode parent;
		Integer weight; // occurrence # of this char in the text

		/**
		 * Constructor
		 *
		 * @param symbol
		 *            The character (a, b, c, etc)
		 * @param leftChild
		 *            The pointer to the left branch - NULL by default
		 * @param rightChild
		 *            The pointer to the right branch - NULL by default
		 * @param weight
		 *            The number of occurrences of this character
		 */
//		public CharNode(Character symbol, CharNode leftChild, CharNode rightChild, Integer weight) {
//			this.symbol = symbol;
//			this.leftChild = leftChild;
//			this.rightChild = rightChild;
//			this.weight = weight;
//		}

		public CharNode(Integer byteValue, CharNode leftChild, CharNode rightChild, Integer weight) {
			this.symbolValue = byteValue;
			this.leftChild = leftChild;
			this.rightChild = rightChild;
			this.weight = weight;
		}

		/**
		 * @return Whether this node is a leaf by checking the left and right
		 *         nodes
		 */
		public boolean isLeaf() {
			return leftChild == null && rightChild == null;
		}

		public int getWeight() {
			return weight;
		}

		/*
		 * Checks the occurrences of this node against the passed node
		 */
		public int compareTo(CharNode o) {
			return this.weight - o.weight;
		}

	}
}
